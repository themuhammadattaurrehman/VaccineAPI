// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VaccineAPI.Models;

namespace VaccineAPI.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20191115202318_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("VaccineAPI.Models.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<long>("VaccineId");

                    b.HasKey("Id");

                    b.HasIndex("VaccineId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("VaccineAPI.Models.BrandAmount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<long>("BrandId");

                    b.Property<long>("DoctorId");

                    b.Property<string>("VaccineName");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("DoctorId");

                    b.ToTable("BrandAmounts");
                });

            modelBuilder.Entity("VaccineAPI.Models.BrandInventory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("BrandId");

                    b.Property<int>("Count");

                    b.Property<long>("DoctorId");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("DoctorId");

                    b.ToTable("BrandInventorys");
                });

            modelBuilder.Entity("VaccineAPI.Models.Child", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<long>("ClinicId");

                    b.Property<string>("CountryCode");

                    b.Property<string>("DOB");

                    b.Property<long?>("DoctorId");

                    b.Property<string>("Email");

                    b.Property<string>("FatherName");

                    b.Property<string>("Gender");

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<bool>("IsBrand");

                    b.Property<bool>("IsConsultationFee");

                    b.Property<bool?>("IsEPIDone");

                    b.Property<bool?>("IsVerified");

                    b.Property<string>("MobileNumber");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("PreferredDayOfReminder");

                    b.Property<string>("PreferredDayOfWeek");

                    b.Property<string>("PreferredSchedule");

                    b.Property<string>("StreetAddress");

                    b.Property<long>("UserId");

                    b.Property<long?>("UserId1");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("UserId1");

                    b.ToTable("Childs");
                });

            modelBuilder.Entity("VaccineAPI.Models.Clinic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<int>("ConsultationFee");

                    b.Property<long>("DoctorId");

                    b.Property<string>("EndTime");

                    b.Property<int>("IsOnline");

                    b.Property<float>("Lat");

                    b.Property<float>("Long");

                    b.Property<string>("Name");

                    b.Property<string>("OffDays");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("VaccineAPI.Models.ClinicTiming", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ClinicId");

                    b.Property<string>("Day");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<bool>("IsOpen");

                    b.Property<string>("Session");

                    b.Property<TimeSpan>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("ClinicTimings");
                });

            modelBuilder.Entity("VaccineAPI.Models.Doctor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalInfo");

                    b.Property<bool>("AllowChart");

                    b.Property<bool>("AllowFollowUp");

                    b.Property<bool>("AllowInventory");

                    b.Property<bool>("AllowInvoice");

                    b.Property<string>("DisplayName");

                    b.Property<string>("DoctorType");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<int?>("InvoiceNumber");

                    b.Property<short>("IsApproved");

                    b.Property<string>("LastName");

                    b.Property<string>("PMDC");

                    b.Property<string>("PhoneNo");

                    b.Property<string>("ProfileImage");

                    b.Property<string>("Qualification");

                    b.Property<bool>("ShowMobile");

                    b.Property<bool>("ShowPhone");

                    b.Property<string>("SignatureImage");

                    b.Property<int>("SmsLimit");

                    b.Property<string>("Speciality");

                    b.Property<long>("UserId");

                    b.Property<DateTime>("ValidUpto");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("VaccineAPI.Models.DoctorSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DoctorId");

                    b.Property<long>("DoseId");

                    b.Property<int>("GapInDays");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("DoseId");

                    b.ToTable("DoctorSchedules");
                });

            modelBuilder.Entity("VaccineAPI.Models.Dose", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DoseOrder");

                    b.Property<int?>("MaxAge");

                    b.Property<int>("MinAge");

                    b.Property<int?>("MinGap");

                    b.Property<string>("Name");

                    b.Property<long>("VaccineId");

                    b.HasKey("Id");

                    b.HasIndex("VaccineId");

                    b.ToTable("Doses");
                });

            modelBuilder.Entity("VaccineAPI.Models.FollowUp", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float?>("BloodPressure");

                    b.Property<float?>("BloodSugar");

                    b.Property<long>("ChildId");

                    b.Property<DateTime>("CurrentVisitDate");

                    b.Property<string>("Disease");

                    b.Property<long>("DoctorId");

                    b.Property<float?>("Height");

                    b.Property<DateTime>("NextVisitDate");

                    b.Property<float?>("OFC");

                    b.Property<float?>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("DoctorId");

                    b.ToTable("FollowUps");
                });

            modelBuilder.Entity("VaccineAPI.Models.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApiResponse");

                    b.Property<string>("Created");

                    b.Property<string>("MobileNumber");

                    b.Property<string>("Sms");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("VaccineAPI.Models.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BrandId");

                    b.Property<long>("ChildId");

                    b.Property<float?>("Circle");

                    b.Property<DateTime>("Date");

                    b.Property<int>("DoseId");

                    b.Property<long?>("DoseId1");

                    b.Property<DateTime>("FromDate");

                    b.Property<string>("GivenDate");

                    b.Property<float?>("Height");

                    b.Property<bool>("IsDone");

                    b.Property<DateTime>("ToDate");

                    b.Property<float?>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ChildId");

                    b.HasIndex("DoseId1");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("VaccineAPI.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowInventory");

                    b.Property<bool>("AllowInvoice");

                    b.Property<long>("ChildId");

                    b.Property<int?>("CountryCode");

                    b.Property<long>("DoctorId");

                    b.Property<string>("DoctorType");

                    b.Property<string>("Email");

                    b.Property<string>("MobileNumber");

                    b.Property<string>("Password");

                    b.Property<string>("ProfileImage");

                    b.Property<string>("UserType");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("VaccineAPI.Models.Vaccine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BrandInventoryId");

                    b.Property<long?>("ChildId");

                    b.Property<int?>("MaxAge");

                    b.Property<int>("MinAge");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("BrandInventoryId");

                    b.HasIndex("ChildId");

                    b.ToTable("Vaccines");
                });

            modelBuilder.Entity("VaccineAPI.Models.Brand", b =>
                {
                    b.HasOne("VaccineAPI.Models.Vaccine", "Vaccine")
                        .WithMany("Brands")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VaccineAPI.Models.BrandAmount", b =>
                {
                    b.HasOne("VaccineAPI.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VaccineAPI.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VaccineAPI.Models.BrandInventory", b =>
                {
                    b.HasOne("VaccineAPI.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VaccineAPI.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VaccineAPI.Models.Child", b =>
                {
                    b.HasOne("VaccineAPI.Models.Clinic", "Clinic")
                        .WithMany("ChildrenCount")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VaccineAPI.Models.Doctor")
                        .WithMany("Childs")
                        .HasForeignKey("DoctorId");

                    b.HasOne("VaccineAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("VaccineAPI.Models.Clinic", b =>
                {
                    b.HasOne("VaccineAPI.Models.Doctor", "Doctor")
                        .WithMany("Clinics")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VaccineAPI.Models.ClinicTiming", b =>
                {
                    b.HasOne("VaccineAPI.Models.Clinic", "Clinic")
                        .WithMany("ClinicTimings")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VaccineAPI.Models.DoctorSchedule", b =>
                {
                    b.HasOne("VaccineAPI.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VaccineAPI.Models.Dose", "Dose")
                        .WithMany()
                        .HasForeignKey("DoseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VaccineAPI.Models.Dose", b =>
                {
                    b.HasOne("VaccineAPI.Models.Vaccine", "Vaccine")
                        .WithMany("Doses")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VaccineAPI.Models.FollowUp", b =>
                {
                    b.HasOne("VaccineAPI.Models.Child", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VaccineAPI.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VaccineAPI.Models.Message", b =>
                {
                    b.HasOne("VaccineAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("VaccineAPI.Models.Schedule", b =>
                {
                    b.HasOne("VaccineAPI.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("VaccineAPI.Models.Child", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VaccineAPI.Models.Dose", "Dose")
                        .WithMany()
                        .HasForeignKey("DoseId1");
                });

            modelBuilder.Entity("VaccineAPI.Models.Vaccine", b =>
                {
                    b.HasOne("VaccineAPI.Models.BrandInventory")
                        .WithMany("VaccineName")
                        .HasForeignKey("BrandInventoryId");

                    b.HasOne("VaccineAPI.Models.Child")
                        .WithMany("ChildVaccines")
                        .HasForeignKey("ChildId");
                });
#pragma warning restore 612, 618
        }
    }
}
