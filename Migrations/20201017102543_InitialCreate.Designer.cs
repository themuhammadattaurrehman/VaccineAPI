// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VaccineAPI.Models;

namespace VaccineAPI.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20201017102543_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("VaccineAPI.Models.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("VaccineId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VaccineId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("VaccineAPI.Models.BrandAmount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("DoctorId");

                    b.ToTable("BrandAmounts");
                });

            modelBuilder.Entity("VaccineAPI.Models.BrandInventory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("DoctorId");

                    b.ToTable("BrandInventorys");
                });

            modelBuilder.Entity("VaccineAPI.Models.Child", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<long>("ClinicId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime");

                    b.Property<long?>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FatherName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<short?>("IsEPIDone")
                        .HasColumnType("smallint");

                    b.Property<short?>("IsVerified")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PreferredDayOfReminder")
                        .HasColumnType("int");

                    b.Property<string>("PreferredDayOfWeek")
                        .HasColumnType("text");

                    b.Property<string>("PreferredSchedule")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("UserId");

                    b.ToTable("Childs");
                });

            modelBuilder.Entity("VaccineAPI.Models.Clinic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("ConsultationFee")
                        .HasColumnType("int");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<short>("IsOnline")
                        .HasColumnType("smallint");

                    b.Property<double>("Lat")
                        .HasColumnType("double");

                    b.Property<double>("Long")
                        .HasColumnType("double");

                    b.Property<string>("MonogramImage")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OffDays")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("VaccineAPI.Models.ClinicTiming", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ClinicId")
                        .HasColumnType("bigint");

                    b.Property<string>("Day")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<short>("IsOpen")
                        .HasColumnType("smallint");

                    b.Property<string>("Session")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("ClinicTimings");
                });

            modelBuilder.Entity("VaccineAPI.Models.Doctor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<short>("AllowChart")
                        .HasColumnType("smallint");

                    b.Property<short>("AllowFollowUp")
                        .HasColumnType("smallint");

                    b.Property<short>("AllowInventory")
                        .HasColumnType("smallint");

                    b.Property<short>("AllowInvoice")
                        .HasColumnType("smallint");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DoctorType")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int?>("InvoiceNumber")
                        .HasColumnType("int");

                    b.Property<short>("IsApproved")
                        .HasColumnType("smallint");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PMDC")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("text");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("text");

                    b.Property<string>("Qualification")
                        .HasColumnType("text");

                    b.Property<int>("SMSLimit")
                        .HasColumnType("int");

                    b.Property<short>("ShowMobile")
                        .HasColumnType("smallint");

                    b.Property<short>("ShowPhone")
                        .HasColumnType("smallint");

                    b.Property<string>("SignatureImage")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ValidUpto")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("VaccineAPI.Models.DoctorSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<long>("DoseId")
                        .HasColumnType("bigint");

                    b.Property<int>("GapInDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("DoseId");

                    b.ToTable("DoctorSchedules");
                });

            modelBuilder.Entity("VaccineAPI.Models.Dose", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int?>("DoseOrder")
                        .HasColumnType("int");

                    b.Property<short?>("IsSpecial")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaxAge")
                        .HasColumnType("int");

                    b.Property<int>("MinAge")
                        .HasColumnType("int");

                    b.Property<int?>("MinGap")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("VaccineId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VaccineId");

                    b.ToTable("Doses");
                });

            modelBuilder.Entity("VaccineAPI.Models.FollowUp", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<float?>("BloodPressure")
                        .HasColumnType("float");

                    b.Property<float?>("BloodSugar")
                        .HasColumnType("float");

                    b.Property<long>("ChildId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CurrentVisitDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Disease")
                        .HasColumnType("text");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<float?>("Height")
                        .HasColumnType("float");

                    b.Property<DateTime?>("NextVisitDate")
                        .HasColumnType("datetime");

                    b.Property<float?>("OFC")
                        .HasColumnType("float");

                    b.Property<float?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("DoctorId");

                    b.ToTable("FollowUps");
                });

            modelBuilder.Entity("VaccineAPI.Models.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ApiResponse")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("text");

                    b.Property<string>("SMS")
                        .HasColumnType("text");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("VaccineAPI.Models.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChildId")
                        .HasColumnType("bigint");

                    b.Property<float?>("Circle")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("DiseaseYear")
                        .HasColumnType("text");

                    b.Property<long>("DoseId")
                        .HasColumnType("bigint");

                    b.Property<short>("Due2EPI")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("GivenDate")
                        .HasColumnType("datetime");

                    b.Property<float?>("Height")
                        .HasColumnType("float");

                    b.Property<short?>("IsDisease")
                        .HasColumnType("smallint");

                    b.Property<short>("IsDone")
                        .HasColumnType("smallint");

                    b.Property<short?>("IsSkip")
                        .HasColumnType("smallint");

                    b.Property<float?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ChildId");

                    b.HasIndex("DoseId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("VaccineAPI.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("UserType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CountryCode = "92",
                            MobileNumber = "3331231231",
                            Password = "1234",
                            UserType = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("VaccineAPI.Models.Vaccine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int?>("MaxAge")
                        .HasColumnType("int");

                    b.Property<int>("MinAge")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Vaccines");
                });

            modelBuilder.Entity("VaccineAPI.Models.Brand", b =>
                {
                    b.HasOne("VaccineAPI.Models.Vaccine", "Vaccine")
                        .WithMany("Brands")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VaccineAPI.Models.BrandAmount", b =>
                {
                    b.HasOne("VaccineAPI.Models.Brand", "Brand")
                        .WithMany("BrandAmounts")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VaccineAPI.Models.Doctor", "Doctor")
                        .WithMany("BrandAmounts")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VaccineAPI.Models.BrandInventory", b =>
                {
                    b.HasOne("VaccineAPI.Models.Brand", "Brand")
                        .WithMany("BrandInventories")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VaccineAPI.Models.Doctor", "Doctor")
                        .WithMany("BrandInventories")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VaccineAPI.Models.Child", b =>
                {
                    b.HasOne("VaccineAPI.Models.Clinic", "Clinic")
                        .WithMany("Childs")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VaccineAPI.Models.Doctor", null)
                        .WithMany("Childs")
                        .HasForeignKey("DoctorId");

                    b.HasOne("VaccineAPI.Models.User", "User")
                        .WithMany("Childs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VaccineAPI.Models.Clinic", b =>
                {
                    b.HasOne("VaccineAPI.Models.Doctor", "Doctor")
                        .WithMany("Clinics")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VaccineAPI.Models.ClinicTiming", b =>
                {
                    b.HasOne("VaccineAPI.Models.Clinic", "Clinic")
                        .WithMany("ClinicTimings")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VaccineAPI.Models.Doctor", b =>
                {
                    b.HasOne("VaccineAPI.Models.User", "User")
                        .WithMany("Doctors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VaccineAPI.Models.DoctorSchedule", b =>
                {
                    b.HasOne("VaccineAPI.Models.Doctor", "Doctor")
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VaccineAPI.Models.Dose", "Dose")
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("DoseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VaccineAPI.Models.Dose", b =>
                {
                    b.HasOne("VaccineAPI.Models.Vaccine", "Vaccine")
                        .WithMany("Doses")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VaccineAPI.Models.FollowUp", b =>
                {
                    b.HasOne("VaccineAPI.Models.Child", "Child")
                        .WithMany("FollowUps")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VaccineAPI.Models.Doctor", "Doctor")
                        .WithMany("FollowUps")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VaccineAPI.Models.Message", b =>
                {
                    b.HasOne("VaccineAPI.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("VaccineAPI.Models.Schedule", b =>
                {
                    b.HasOne("VaccineAPI.Models.Brand", "Brand")
                        .WithMany("Schedules")
                        .HasForeignKey("BrandId");

                    b.HasOne("VaccineAPI.Models.Child", "Child")
                        .WithMany("Schedules")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VaccineAPI.Models.Dose", "Dose")
                        .WithMany("Schedules")
                        .HasForeignKey("DoseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
